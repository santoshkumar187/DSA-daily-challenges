ðŸ§  What Is a Linked List?
A Linked List is a linear data structure where each element (called a node) contains:

Data

A reference (or pointer) to the next node

Example:
Code
[1] â†’ [2] â†’ [3] â†’ [4] â†’ null




/*

Problem statement
You are given a Singly Linked List of integers. You need to reverse the Linked List by changing the links between nodes.

Note :
You do not need to print anything, just return the head of the reversed linked list. 

*/

/*
--

- take prev and init to null
- take curr and init to head
- while curr is not null {
	take next and init to curr.next
	point curr.next to prev
	move prev to curr
	move curr to next
}
- return prev

--
*/

import java.io.*;
import java.util.* ;

/*
	Following is the structure of the Singly Linked List.	
	class LinkedListNode<T> 
    {
    	T data;
    	LinkedListNode<T> next;
    	public LinkedListNode(T data) 
        {
        	this.data = data;
    	}
	}

*/
public class Solution 
{
    public static LinkedListNode<Integer> reverseLinkedList(LinkedListNode<Integer> head) 
    {
		LinkedListNode<Integer> prev = null;
		LinkedListNode<Integer> curr = head;
		while(curr != null) {
		LinkedListNode<Integer> next = curr.next;
			curr.next = prev;
			prev = curr;
			curr = next;
		}
		return prev;
    }
}


or


import java.util.*;

class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        ListNode head = null, tail = null;

        for (int i = 0; i < n; i++) {
            ListNode node = new ListNode(sc.nextInt());
            if (head == null) head = tail = node;
            else tail = tail.next = node;
        }

        ListNode reversed = new Solution().reverseList(head);
        while (reversed != null) {
            System.out.print(reversed.val + " ");
            reversed = reversed.next;
        }
        sc.close();
    }
}

ouput

enter no of nodes: 5
10 20 30 40 50

reversed linked list
50 40 30 20 10











