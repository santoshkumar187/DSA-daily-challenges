// Main class that contains all logic
public class LinkedListMiddle {

    // Static nested class to define a node in the linked list
    static class Node {
        int data;      // Value stored in the node
        Node next;     // Reference to the next node

        // Constructor to initialize node with data
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Function to find the middle node of the linked list
    public static Node findMiddle(Node head) {
        if (head == null) return null; // If list is empty, return null

        Node slow = head; // Moves one step at a time
        Node fast = head; // Moves two steps at a time

        // Loop until fast reaches the end of the list
        while (fast != null && fast.next != null) {
            slow = slow.next;         // Move slow by one node
            fast = fast.next.next;    // Move fast by two nodes
        }

        return slow; // Slow is now at the middle node
    }

    // Function to print the entire linked list
    public static void printList(Node head) {
        Node temp = head; // Start from the head

        // Traverse and print each node
        while (temp != null) {
            System.out.print(temp.data + " → ");
            temp = temp.next; // Move to the next node
        }

        System.out.println("null"); // End of list
    }

    // Main method to run the program
    public static void main(String[] args) {
        // Create linked list: 1 → 2 → 3 → 4 → 5
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Print the linked list
        System.out.print("Linked List: ");
        printList(head);

        // Find and print the middle node
        Node middle = findMiddle(head);
        System.out.println("Middle node data: " + (middle != null ? middle.data : "List is empty"));
    }
}

///output/////

Linked List: 1 → 2 → 3 → 4 → 5 → null
Middle node data: 3
