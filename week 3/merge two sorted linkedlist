

## 📘 What Is a Singly Linked List?

A **singly linked list** is a linear data structure where each element (called a **node**) contains:
- **Data**: the actual value.
- **Next pointer**: a reference to the next node in the list.

Unlike arrays, linked lists do **not store elements in contiguous memory**. Instead, each node points to the next, forming a chain.

---

## 🧱 Structure of a Node

```
[ data | next ] → [ data | next ] → [ data | next ] → null
```

Each node holds:
- A value (e.g., `5`)
- A reference to the next node (or `null` if it's the last)

---

## ✅ Simple Java Example

```java
class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LinkedListExample {
    public static void main(String[] args) {
        // Creating nodes
        Node head = new Node(10);
        head.next = new Node(20);
        head.next.next = new Node(30);

        // Traversing the list
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " → ");
            current = current.next;
        }
        System.out.println("null");
    }
}
```

### 🧪 Output:
```
10 → 20 → 30 → null
```

---

## 🧠 Why Use Singly Linked Lists?

- ✅ Dynamic size (no need to predefine length)
- ✅ Efficient insertions/deletions (especially at the beginning)
- ❌ Slower access (no direct indexing like arrays)

---





/*
You are given two sorted linked lists list1 and list2.
Merge them into a single sorted linked list and return the head.

Example:

Input: 
list1 = 1 → 3 → 5
list2 = 2 → 4 → 6
Output: 1 → 2 → 3 → 4 → 5 → 6


*/


/*
function mergeSortedLists(l1, l2):
    create dummy node
    tail = dummy

    while l1 != null AND l2 != null:
        if l1.data <= l2.data:
            tail.next = l1
            l1 = l1.next
        else:
            tail.next = l2
            l2 = l2.next
        tail = tail.next
    
    # attach remaining nodes
    if l1 != null: 
        tail.next = l1
    else:
        tail.next = l2
    
    return dummy.next



*/


class Node {
    int data;
    Node next;
    
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Solution {
    public static Node mergeTwoLists(Node l1, Node l2) {
        Node dummy = new Node(0); // dummy node
        Node tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.data <= l2.data) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        // attach the remaining nodes
        if (l1 != null) {
            tail.next = l1;
        } else {
            tail.next = l2;
        }

        return dummy.next;
    }

    // Helper function to print a linked list
    public static void printList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // First sorted list: 1 -> 3 -> 5
        Node l1 = new Node(1);
        l1.next = new Node(3);
        l1.next.next = new Node(5);

        // Second sorted list: 2 -> 4 -> 6
        Node l2 = new Node(2);
        l2.next = new Node(4);
        l2.next.next = new Node(6);

        System.out.print("List 1: ");
        printList(l1);
        System.out.print("List 2: ");
        printList(l2);

        Node merged = mergeTwoLists(l1, l2);

        System.out.print("Merged List: ");
        printList(merged);
    }
}



explaining to interviwer 
"I used a dummy node to simplify pointer manipulation and a two-pointer approach to compare nodes from both lists. 
The smaller node is appended to the result, and the pointer is advanced. Once one list is exhausted, 
I attach the remaining nodes from the other list. This ensures a linear-time, in-place merge of two sorted linked lists."
