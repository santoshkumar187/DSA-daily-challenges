/*
You are given a 2D matrix with the following properties:

Integers in each row are sorted in ascending order.

The first integer of each row is greater than the last integer of the previous row.

matrix = [
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 60]
]
target = 3

*/

/*

function searchMatrix(matrix, target):
    m = rows, n = cols
    low = 0, high = m*n - 1

    while low <= high:
        mid = (low + high) / 2
        row = mid / n
        col = mid % n
        value = matrix[row][col]

        if value == target:
            return true
        else if value < target:
            low = mid + 1
        else:
            high = mid - 1

    return false

*/


public class Search2DMatrix {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;

        int low = 0, high = m * n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int row = mid / n;
            int col = mid % n;

            int value = matrix[row][col];

            if (value == target) {
                return true;
            } else if (value < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }

    // demo
    public static void main(String[] args) {
        Search2DMatrix sol = new Search2DMatrix();
        int[][] matrix = {
            {1, 3, 5, 7},
            {10, 11, 16, 20},
            {23, 30, 34, 60}
        };

        System.out.println(sol.searchMatrix(matrix, 3));  // true
        System.out.println(sol.searchMatrix(matrix, 13)); // false
    }
}
