Problem statement:
You are given two non-negative numbers 'num1' and 'num2' represented in the form of linked lists.
The digits in the linked lists are stored in reverse order, i.e. starting from least significant digit (LSD) to the most significant digit (MSD), and each of their nodes contains a single digit.
Calculate the sum of the two numbers and return the head of the sum list.


// inital
num1 = 342 → represented as 2 → 4 → 3
num2 = 465 → represented as 5 → 6 → 4

Result = 807 → represented as 7 → 0 → 8


//Approach

Traverse both linked lists simultaneously.

Add the digits along with a carry (since 9 + 8 = 17, etc.).

Store the result digit in a new linked list.

Move forward in both lists until they end.

If a carry remains at the end, add it as a new node.


What is a Linked List?

A Linked List is a way to store data like an array.

But instead of continuous memory like arrays, it stores elements as nodes.

Each node has:

data (the value)

next (a pointer/reference to the next node)


// Node for linked list
class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class AddTwoNumbersSimple {

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0); // start node
        ListNode curr = dummy;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;

            int sum = x + y + carry;
            carry = sum / 10;

            curr.next = new ListNode(sum % 10);
            curr = curr.next;

            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }

        return dummy.next;
    }

    // Print linked list
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + (head.next != null ? " -> " : ""));
            head = head.next;
        }
        System.out.println();
    }

    // Example run
    public static void main(String[] args) {
        // 342 = 2 -> 4 -> 3
        ListNode l1 = new ListNode(2);
        l1.next = new ListNode(4);
        l1.next.next = new ListNode(3);

        // 465 = 5 -> 6 -> 4
        ListNode l2 = new ListNode(5);
        l2.next = new ListNode(6);
        l2.next.next = new ListNode(4);

        AddTwoNumbersSimple obj = new AddTwoNumbersSimple();
        ListNode result = obj.addTwoNumbers(l1, l2);

        // should print 7 -> 0 -> 8
        printList(result);
    }
}
